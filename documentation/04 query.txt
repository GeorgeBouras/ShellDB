Query operations are available at path /query

	POST db/query

Query the database at any level using optional filters


Mandatory query keys

  db
    The database to qeury
  key
    From which key to start searching

Optional query keys

  allow_empty_keys
    You can include empty keys that they have pass the key filters but none of the value filters by specifing   "allow_empty_keys":true
  max_level
    You can limit the levels of how deep the query will dig by using the key  max_level
  filter
    The filters are applied at search time so the I/O is reduced as much as possible
    You can apply filters at keys, at values or both at keys/values
    
    Filters are optional. if your not define filters all the documents under the key are returned
    Usually is better to hit a deep key directly than a shallow one using filters to narrow your search
    
    The filfer have logical AND with each other, but at every filter's condition we can have OR
    You can have multiple blocks at every filter using parenthesis
    At every filter you can optionak define the level that should be checked against and at whichs keys to perform the condition

Mandatory filter keys

  type
    "key" or "value" it is which type of recored to apply the condition
  condition
    your psedo code condition. ? is the current value

Optional filter keys

  level
    On which leveles to apply the condition. All if missing
    It can be a single or a list of integers
  condition_at_fields
    On which fields to apply the condition. All if missing
    It can be a single or a list
    When "type":"key" it have no effect. It is only for values
    

example

    {
    "db"               : "MyDB",
    "key"              : "/",
    "max_level"        : 3,
    "select"           : ["col1", "col2"],
    "allow_empty_keys" : false,
    "filter"           : [

        {
        "level"     : "1",
        "type"      : "key",
        "condition" : "(? == '2012')"
        },

        {
        "level"     : ["2","5","10"],
        "type"      : "key",
        "condition" : "(? == '04')"
        },

        {
        "type"      : "key",
        "condition" : "(? == '30')"
        },

		{
        "level":"2",
        "type":"value",
        "condition_at_fields":["album", "id"],
        "condition":"? =~ /George/i"
        }
      ]
    }



If your to include extra fields at your results e.g. field3, field4 
except the ones that already defined at 
    "condition_at_fields" : ["field1", "field"],
you can include filters like the following

    {  "type":"value" , "condition_at_fields":["field3","field4"],  "condition":"1" }



As usuall the query is a json document posted at the server e.g.
curl -XPOST -H"Content-Type: application/json" -d @query.json 'localhost:7000/query?canonical=true'
You can use also the postman browser extension or SoapUI if your prefer


At filter's condtitions you can use the usual operators and simple functionms common
to all languages (substr, index, etc) and regular expressions

	>    greater than     arithmetic
	>=   greater or equal arithmetic
	==   equal            arithmetic
	<=   less    or equal arithmetic
	<    less    than     arithmetic

	gt   greater than     literal
	ge   greater or equal literal
	eq   equal            literal
	le   less    or equal literal
	lt   less    than     literal

	or   logical OR
	and  logical AND

regular expession examples

	? =~ /foo/            search for foo at the text body
	? =~ /foo/i           the same case but case insensitive
	? =~ /foo|boo/i       foo or boo
	? =~ /goo(foo|boo)/i  goofoo or gooboo
	? =~ /^foo/i          start from foo
    ? =~ /foo$/i          end   to   foo
    ? =~ /^foo$/i         most of it like the eq but case insensitive
    ? =~ /./              any character
    ? =~ /\d/             any digit
	? =~ /\w/             any digit or letter or _




Query examples:
if we insert the data

	{
	"db"    : "DB1",
	"append": false,
	"data"  : {
	  "192" : {
	    "168": {
	       "0": {
	        "34":{
	          "host"  : "srv34",
	          "status": "up",
	          "role"  : [ "http", "ftp", "db", "file", "mail" ]
	          }
	        }
	      }
	    }
	  }
	}


we can have the queries

	{
	"db"        : "DB1",
	"key"       : "192",
	"max_level" : 5
	}

	{
	"db"  : "DB1",
	"key" : "192/168/0/34"
	}

	{
	"db"  : "DB1",
	"key" : "192/168/0/34/status"
	}

	{
	"db"     : "DB1",
	"key"    : "192/168/0/34",
	"filter" : [ 
	             { 
	             "level"     : "1",
	             "type"      : "value",
	             "condition" : "(? eq 'http') or (? =~/^f/i )",,
                 "condition_at_fields" : "role"
	             }
	           ]
	}

the last one will returnn only the roles "http", and "ftp", "file" because their name is starting from the letter f
Lets view an other example. Load the data

	{
	"db"     : "DB1",
	"append" : false,
	"data"   : {
		"2000" : {
			"01" : {
				"01" : "v1",
				"10" : [ "a1", "a2", "a3" ],
				"30" : [ "b1", "b2", "b3" ]
				},
			"02" : {
				"01" : "v2",
				"10" : [ "c1", "d2", "c3" ],
				"28" : [ "d1", "d2", "d3" ]
				}
			},
		"2012" : {
			"04" : {
				"01" : "v3",
				"10" : [ "d1", "d2", "d3" ],
				"30" : [ "e1", "e2", "e3" ]
				},
			"07" : {
				"06" : "v4",
				"07" : [ "f1", "f2", "f3" ],
				"08" : [ "g1", "g2", "g3" ]
				}
			},
		"2017" : {
			"11" : {
				"01" : "v3",
				"05" : [ "h1", "h2", "h3" ],
				"09" : [ "i1", "i2", "i3" ]
				},
			"12" : {
				"11" : "v4",
				"15" : [ "j1", "j2", "j3" ],
				"31" : [ "k1", "k2", "k3" ]
				}
			}
		}
	}


Some queries on these data

all /2000

	{ "db" : "DB1", "key" : "2000" }

From 2017/12/21 only the values k1,k2

	{
	"db"        : "DB1",
	"key"       : "/",
	"max_level" : 5,
	"filter"    : [
	  { "level":"1", "type":"key"  , "condition":"(? == '2017')"   },
	  { "level":"2", "type":"key"  , "condition":"(? == '12')"     },
	  { "level":"3", "type":"key"  , "condition":"(? == '31')"     }, 
	  { "level":"3", "type":"value", "condition":"(? =~ /k(1|2)/)" } 
	  ]
	}

filtering at years and months

	{
	"db"        : "DB1",
	"key"       : "/",
	"max_level" : 5,
	"filter"    : [
	{"level":"1", "type":"key",  "condition": "(? == '2012') or (? > '2014')" },
	{"level":"2", "type":"key",  "condition": "(? > '08')" },
	{"level":"3", "type":"key",  "condition": "(? >= '12')"},
	{"level":"3", "type":"value","condition": "(? =~ /^k/ )"}  ]
	}
