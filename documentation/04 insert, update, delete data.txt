Data operations are available at path / 
The following methods are available

	insert : Insert, update data
	delete : Delete selected keys
	exist  : Check if a key exists
	rename : Rename a key


insert or update data
---------------------

	POST db/insert
	Inserted data can be : Values, Lists, Hashes (Associative arrays)
	append key can be true or false (default)
	When append is false data are over writing the existing (default)
	When append is true  data are appended as a list of values
	Quick example

	curl -XPOST -H"Content-Type: application/json" -d '{"db":"DB1", "data":{"joe":"foo"}}' localhost:7000/insert
	
	Bulk insert multiple records

	{
	"db"     : "DB1",
	"append" : false,
	"data"   : {
		"01" : {
			"name"  : "Joe",
			"last"  : "Average",
			"hash"  : { "k1":"v1" , "k2":"v2"},
			"array" : [ "item1", "item2", "item3" ]
			}
		}
	}


	It is up to you to select the structure of the inserted data because
	it have great impact at the queris. For example Storing IP addresses as

	{
	"db"    : "DB1",
	"append": false,
	"data"  : {
	  "192" : {
	    "168": {
	       "0": {
	        "34":{
	          "host"  : "srv34",
	          "status": "up"
	          }
	        }
	      }
	    }
	  }
	}

	
	This pruducem much faster queries, than storing the same data as

	{
	"db"     : "DB1",
	"append" : false,
	"data"   : {
	  "192.168.0.34" : { "host":"srv34", "status":"up" }
	  }
	}
	
	curl -XPOST -H"Content-Type: application/json" -d @data.json localhost:7000/insert


delete keys
-----------

	POST db/delete
	Delete deep keys from the stored data structurss
	check_data key can be false or true (default)
	If check_data is true, deletes the key only if there are not sub-keys
	This is a safety guard for not deleting other keys by mistake

	examples:
	curl -XPOST -H"Content-Type: application/json" -d '{"db":"DB1","key":"joe",    "check_data":false}' localhost:7000/delete
	curl -XPOST -H"Content-Type: application/json" -d '{"db":"DB1","key":"2012/07","check_data":false}' localhost:7000/delete


exist key
---------

	POST db/exist
	Check if a key exists. The key can be nested on a deep level e.g.

	curl -XPOST -H"Content-Type: application/json" -d '{"db":"DB1","key":"192"}'     localhost:7000/exist
	curl -XPOST -H"Content-Type: application/json" -d '{"db":"DB1","key":"192/168"}' localhost:7000/exist

	If the key is missing "exist" is 0 other else is 1
	If the key contain values "holdvalues" is 1 other else is 0 e.g.

	{
	"exist"         : 1,
	"holdvalues"    : 0,
	"error_message" : "success",
	"error_code"    : 0
	}

	{
	"exist"         : 0,
	"holdvalues"    : 0,
	"error_message" : "success",
	"error_code"    : 0
	}

rename key
----------

	POST db/rename
	The key can be nested on a deep level
	check_data key can be false or true (default)
	If check_data is true, rename the key only if there are not sub-keys
	This is a safety guard for not affecting other keys by mistake
	Example of posted data

	{
	"db"         : "DB1",
	"key"        : "2012/04/10",
	"new_name"   : "2012/04/03",
	"check_data" : false
	}

	examples:
	curl -XPOST -H"Content-Type: application/json" --data @file.json localhost:7000/rename

