#!/usr/bin/perl
# Query
#
# George Bouras
# george.mpouras@yandex.com

use strict;
use warnings;
use lib '/opt/shelldb/lib_perl';
use shelldb;

exists $input->{$_} || Exit(5, "key '$_' is missing from your input") foreach qw/db key/;
$input->{key}		=~s/^\/*(.*?)\/*$/$1/;
$input->{max_level}	//= 2000;
-d "$datadir/$input->{db}/data"					|| Exit 6,"The database $input->{db} does not exist";
-d "$datadir/$input->{db}/data/$input->{key}"	|| Exit 7,'key does not exist';
$input->{max_level}	=~/^\d+$/					|| Exit 8, 'max_level should be an integer';
$output->{data}		= {};
$input->{allow_empty_keys} = exists $input->{allow_empty_keys}	? $input->{allow_empty_keys}=~/^(t|1)/i ?1:0:0;

my $filter	= {key=>{}, val=>{}};
my $level	= 0;
my @data;
my @path;
my $key;
my $type;
my $rec;


# Parse and compile the filters
if (exists $input->{filter}) {
$input->{filter} = [ $input->{filter} ] if 'HASH' eq ref $input->{filter};
Exit(9, 'filter key is not a json of closures or just a single closure') unless 'ARRAY' eq ref $input->{filter};
my $i=1;

	my $parsefilter = sub { # use Data::Dumper; print Dumper $_[0]; exit;
	(my $code = $_[0]->{condition}) =~s/\?/\$_[0]/gm;
	$code = eval "sub{$code?1:0}";
	Exit(13, "Could not understand the $type filter $i condition $_[0]->{condition} , possible syntax error") if $@;
	my $F;

		if (exists $_[0]->{on_keys}) {

			if ('ARRAY' eq ref $_[0]->{on_keys}) {
			$F->{$_} = undef for @{$_[0]->{on_keys}}
			}
			else {
			$F->{ $_[0]->{on_keys} } = undef
			}
		}

	$F //= 'all';

	{on_keys=>$F, code=>$code}
	};

	foreach my $f (@{$input->{filter}}) {
	exists $f->{$_} || Exit 10,"filter $i is missing the key $_" foreach qw/type condition/;
	$type = $f->{type}=~/(?i)^k/ ? 'key' : $f->{type}=~/(?i)^v/ ? 'val' : Exit 12,"filter $i type $f->{type} should be keys or values";

		if (exists $f->{level}) {
		$f->{level} = [ $f->{level} ] unless 'ARRAY' eq ref $f->{level};

			foreach my $level (@{$f->{level}}) {
			Exit 12,"filter $i level $level should be an interger" if $level !~/^\d+$/;			
			push @{$filter->{$type}->{$level}}, $parsefilter->($f)
			}
		}
		else {
		push @{$filter->{$type}->{all}}, $parsefilter->($f)
		}

	$i++
	}
}



foreach ('key','val') { delete $filter->{$_} unless %{$filter->{$_}} }
delete $input->{filter};

#use Data::Dumper; print Dumper $filter; exit;

chdir "$datadir/$input->{db}/data/$input->{key}";
recursive_dir('.');
Exit;



	###############
	#             #
	#  Functions  #
	#             #
	###############




sub Filter
{
	if (exists $filter->{key}->{$level}) {

		foreach (@{$filter->{key}->{$level}}) {
		return 0 unless $_->{code}->($_[0])
		}
	}

	if (exists $filter->{key}->{all}) {

		foreach (@{$filter->{key}->{all}}) {
		return 0 unless $_->{code}->($_[0])
		}
	}
1
}










sub recursive_dir
{
opendir my $dh, $_[0] or Exit(20,"Could not read directory $_[0] the error is $!");

	foreach $key (grep ! /^\.+$/, readdir $dh)
	{
	my $fullpath= "$_[0]/$key";
	@path		= split /\//,$fullpath; shift @path;
	$level		= scalar @path;
	next unless Filter $key;
	#print "$level $fullpath\n";

		# dir
	 	if (-d $fullpath) {		
		HashKeySet($output->{data}, [@path]) if $input->{allow_empty_keys};
		recursive_dir($fullpath) if $input->{max_level} > $level
		}


		# file
		else {
		@data=();		

			if (exists $filter->{val}) {
			
				if (exists $filter->{val}->{$level}) {
					foreach (@{$filter->{val}->{$level}}) {
						if ( ($_->{on_keys} eq 'all') || (exists $_->{on_keys}->{$key}) ) {
						open FILE, '<:utf8', $fullpath or Exit 21,"Could not read file $fullpath because $!";
							while($rec=<FILE>) {
							next if $rec=~/^\s*$/;
							$rec=~s/^\s*(.*?)\s*$/$1/;
							push @data, $rec if $_->{code}->($rec)
							}
						close FILE
						}
					}	
				}

				if (exists $filter->{val}->{all}) {
					foreach (@{$filter->{val}->{all}}) {
						if ( ($_->{on_keys} eq 'all') || (exists $_->{on_keys}->{$key}) ) {
						open FILE, '<:utf8', $fullpath or Exit 22,"Could not read file $fullpath because $!";
							while($rec=<FILE>) {
							next if $rec=~/^\s*$/;
							$rec=~s/^\s*(.*?)\s*$/$1/;
							push @data, $rec if $_->{code}->($rec)
							}
						close FILE
						}
					}
				}
			}
			else {
			open FILE, '<:utf8', $fullpath or Exit 23,"Could not read file $fullpath because $!";
			while($rec=<FILE>) { next if $rec=~/^\s*$/; $rec=~s/^\s*(.*?)\s*$/$1/; push @data, $rec }
			close FILE			
			}


			if (@data) {

				if (@data > 1) {
				HashKeySet($output->{data}, [@path], [@data] ) } else {
				HashKeySet($output->{data}, [@path], $data[0] )
				}

			$output->{count}->{"level $level"}->{$key} += scalar @data
			}
		}
	}

closedir $dh
}















# Sets a value to a hash deep key
#
#              HASH ,   LIST OF KEY PATH            VALUE OR LIST OF SUBKEYS
#########################################################
#	HashKeySet($hash,  ['a1', 'b2']                                       );
#	HashKeySet($hash,  ['a1', 'b1', 'c2'],          2                     );
#	HashKeySet($hash,  ['a1', 'b1', 'c1', 'popA'],  ['k1','v1','k2','v2'] );
#	HashKeySet($hash,  ['a1', 'b1', 'c1', 'popC'],  'hello'               );
#	HashKeySet($hash,  ['a1'],                      ['k7','v7','k8','v8'] );
#
sub HashKeySet
{
my $Ref     = $_[0];
my $lastkey = @{$_[1]} ? pop @{$_[1]} : 'value';

	foreach (@{$_[1]})
	{
		if ( ref $Ref->{$_})
		{
			if	(ref $Ref->{$_} eq 'ARRAY')
			{
			my $hash;

					for (my $i=0; $i<@{$Ref->{$_}}; $i++)
					{
					$hash->{ $Ref->{$_}->[$i] } = undef
					}

			$Ref->{$_} = $hash
			}
			elsif	(ref $Ref->{$_} eq 'SCALAR')
			{		
			$Ref->{$_} = { ${$Ref->{$_}} => undef }
			}
			elsif	(ref $Ref->{$_} ne 'HASH')
			{
			$Ref->{$_} = {}
			}
		}
		else
		{
			if (defined $Ref->{$_})
			{
			$Ref->{$_} = { $Ref->{$_} => undef }
			}
			else
			{			
			$Ref->{$_} = {}	
			}
		}

	$Ref = $Ref->{$_}
	}


	if (exists $Ref->{$lastkey})
	{
		if (exists $_[2])
		{
			if ('ARRAY' eq ref $Ref->{$lastkey})
			{
				if ('ARRAY' eq ref $_[2])
				{	
				push @{$Ref->{$lastkey}}, @{$_[2]}
				}
				else
				{
				push @{$Ref->{$lastkey}}, $_[2]
				}
			}
			elsif ('HASH' eq ref $Ref->{$lastkey})
			{
				if ('HASH' eq ref $_[2])
				{
					foreach (keys %{$_[2]})
					{
					$Ref->{$lastkey}->{$_} = $_[2]->{$_}
					}
				}
				else
				{
					if ( %{$Ref->{$lastkey}} )
					{
					# last key is a hash with data

						if ('ARRAY' eq ref $_[2])
						{
							for (my $i=0; $i<@{$_[2]}; $i++)
							{
							$Ref->{$lastkey}->{ $_[2]->[$i] } = undef
							}
						}
						else
						{
						$Ref->{$lastkey}->{ $_[2] } = undef
						}
					}
					else
					{
					$Ref->{$lastkey} = $_[2]
					}
				}
			}
			else
			{
				if ('ARRAY' eq ref $_[2])
				{
				$Ref->{$lastkey} = [ $Ref->{$lastkey} , @{$_[2]} ]
				}
				else
				{
				$Ref->{$lastkey} = [ $Ref->{$lastkey} , $_[2] ]
				}			
			} 
		}
	}
	else
	{
	$Ref->{$lastkey} = exists $_[2] ? $_[2] : {}
	}
}